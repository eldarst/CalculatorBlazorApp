@page "/counter"
@using System.Data
@using System.Globalization

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<section>
    <div class="container">
        <label id="display" >@_current</label>
        <div class="buttons">
            <div class="button" @onclick='() => CalcButtonClick("CLEAR")'>C</div>
            <div class="button" @onclick='e => CalcButtonClick("/")'>/</div >
            <div class="button" @onclick='() => CalcButtonClick("*")'>*</div >
            <div class="button" @onclick='() => CalcButtonClick("DEL")'>&larr;</div>
            <div class="button" @onclick="@(e => NumberButtonClick(7))">7</div>
            <div class="button" @onclick="@(e => NumberButtonClick(8))">8</div>
            <div class="button" @onclick="@(e => NumberButtonClick(9))">9</div>
            <div class="button" @onclick='() => CalcButtonClick("-")'>-</div >
            <div class="button" @onclick="@(e => NumberButtonClick(4))">4</div>
            <div class="button" @onclick="@(e => NumberButtonClick(5))">5</div>
            <div class="button" @onclick="@(e => NumberButtonClick(6))">6</div>
            <div class="button" @onclick='() => CalcButtonClick("+")'>+</div >
            <div class="button" @onclick="@(e => NumberButtonClick(1))">1</div>
            <div class="button" @onclick="@(e => NumberButtonClick(3))">2</div>
            <div class="button" @onclick="@(e => NumberButtonClick(3))">3</div>            
            <div class="button" @onclick='() => CalcButtonClick(".")'>.</div >
            <div class="button" @onclick='() => CalcButtonClick("(")'>(</div >
            <div class="button" @onclick="@(e => NumberButtonClick(0))">0</div>
            <div class="button" @onclick='() => CalcButtonClick(")")'>)</div >
            <div class="button" @onclick='() => CalcButtonClick("=")'>=</div>
        </div>
    </div>
</section>


@code {
    private string _current = "";
    private string _allOperations = "+-*/";
    private string _lastOperation = string.Empty;

    void NumberButtonClick(int number)
    {
        if (_lastOperation == "=")
        {
            _current = string.Empty;
            _lastOperation = string.Empty;
        }
            
        _current = string.Format($"{_current}{number}");
    }
    
    void CalcButtonClick (string operation)
    {
        switch (operation)
        {
            case "CLEAR":
                _lastOperation = string.Empty;
                _current = string.Empty;
                break;
            case "DEL":
                _current = _current[..^1];
                break;
            case "=":
                CountResult();
                break;
            default:
                HandleOperations(operation);
                break;
        }
    }

    private void CountResult()
    {
        if (_current.Length <= 0) return;
        if (CouldClosed()) return;

        var result = Math.Round(Convert.ToDouble(new DataTable().Compute(_current, String.Empty)), 5);
        _lastOperation = "=";
        _current = result.ToString(CultureInfo.InvariantCulture);
    }

    private void HandleOperations(string operation)
    {
        if (_current.Length == 0)
        {
            if ("-(.".Contains(operation))
                _current += operation;
            return;
        }
        
        
        if (_allOperations.Contains(operation))
        {
            AddOperation(operation);
        }
        else
        {
            AddAnother(operation);
        }
    }

    private void AddAnother(string operation)
    {
        switch (operation)
        {
            case "(":
                if (_allOperations.Contains(_current[^1]))
                    _current += operation;
                else
                {
                    _current += string.Format($"*{operation}");
                    _lastOperation = string.Empty;
                }
                break;
            case ")":
                if (CouldClosed())
                {
                    _current += operation;
                }
                break;
            default:
            {
                if (operation != "." || _current[^1] != '.')
                    _current += operation;
                break;  
            }
        }
    }

    private bool CouldClosed()
    {
        var stack = new Stack<bool>();
        foreach (var operation in _current)
        {
            if (operation == '(')
                stack.Push(true);
            if (operation == ')')
                stack.Pop();
        }
        return (stack.Count >= 1);
    }

    private void AddOperation(string operation)
    {
        _lastOperation = string.Empty;
        var lastEntered = _current[^1];
        if (_allOperations.Contains(lastEntered))
        {
            _current = string.Format($"{_current[..^1]}{operation[0]}");
        }
        else
        {
            _current += operation;
        }
    }

}